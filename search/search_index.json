{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to SqlIntuitive SqlIntuitive is a Python library to make database stuff easier. It offers a way to perform database transactions with no need to write any SQL statements as those will be generated automatically. Another advantage is the ability to store any Python object you want to inside a database. Currently only MySQL and SqLite are supported, but more will come in the future and contributing is most welcome. - Getting started - User Guide - Code Docs - Changelog","title":"Home"},{"location":"#welcome-to-sqlintuitive","text":"SqlIntuitive is a Python library to make database stuff easier. It offers a way to perform database transactions with no need to write any SQL statements as those will be generated automatically. Another advantage is the ability to store any Python object you want to inside a database. Currently only MySQL and SqLite are supported, but more will come in the future and contributing is most welcome. - Getting started - User Guide - Code Docs - Changelog","title":"Welcome to SqlIntuitive"},{"location":"changelog/","text":"Changelog A full list of all changes ordered by the version they were made in. 0.9.0 - Join added sql generators for INNER, LEFT, RIGHT and FULL JOIN added 'select ... join' command 0.8.0 - Alter table commands added enums of available sql generation functions per dbSystem added 'alter table' commands added 'alter table rename' command for sqlite added __main__.py added long_description_content_type field (__init__.py) 0.7.1 - CursorNotNone added raising CursorNotNone exception if cursor is none when trying to execute database operations 0.7.0 - Support tracker, select command enhancement, ... included version, author and license information to the main __init__.py added support tracker to prevent db systems to execute unsupported operations from base db system enhanced select_from generator with select_count, select_avg and select_sum added 'DISTINCT' option to select operations remade and improved exceptions Breaking changes made a variety of parameters keyword-only wich concerns the modules sqlGeneration and dbSystems moved sqlGeneration.py to sqlGeneration/standard: only db systems and sqlGeneration are concerned 0.6.0 - Sqlite support added further metadata to setup.py created MANIFEST.in sqlite is now supported: added base db system all other db systems inherit from 0.5.0 - Custom data types introduced custom data types annotated functions to give type hints 0.4.2 added naming constraits of a foreign key 0.4.1 replaced pytest.raises with assertRaises from unittest fixed primary key bug that generated invalid SQL 0.4.0 converted test-cases into 'unittest.TestCase's added primary and foreign key constraits added unique contrait custom exceptions got a hierarchy 0.3.2 added importing sub-modules recursivly in all __init__.py files 0.3.0 added MySql db system with connect_to_dn(), close_connection(), get_cursor() MySQL db system got functions to process db actions renamed test files to order their execution create_table() got the option to use \"IF NOT EXISTS\" no longer directly inserting values into SQL statements -> added parameter for defining a placeholder (default: '?') introduced SQL generator select new requirement: mysql-connector-python 0.2.2 introduced the following SQL generators: drop_table drop_db 0.2.1 minimum python version set to 3.8 or newer 0.2.0 added setup.py introduced the following SQL generators: insert_into delete_from create_table update added sqlGeneration.check_validName() wich checks whether a string is a valid name for a database table","title":"Changelog"},{"location":"changelog/#changelog","text":"A full list of all changes ordered by the version they were made in.","title":"Changelog"},{"location":"changelog/#090-join","text":"added sql generators for INNER, LEFT, RIGHT and FULL JOIN added 'select ... join' command","title":"0.9.0 - Join"},{"location":"changelog/#080-alter-table-commands","text":"added enums of available sql generation functions per dbSystem added 'alter table' commands added 'alter table rename' command for sqlite added __main__.py added long_description_content_type field (__init__.py)","title":"0.8.0 - Alter table commands"},{"location":"changelog/#071-cursornotnone","text":"added raising CursorNotNone exception if cursor is none when trying to execute database operations","title":"0.7.1 - CursorNotNone"},{"location":"changelog/#070-support-tracker-select-command-enhancement","text":"included version, author and license information to the main __init__.py added support tracker to prevent db systems to execute unsupported operations from base db system enhanced select_from generator with select_count, select_avg and select_sum added 'DISTINCT' option to select operations remade and improved exceptions","title":"0.7.0 - Support tracker, select command enhancement, ..."},{"location":"changelog/#breaking-changes","text":"made a variety of parameters keyword-only wich concerns the modules sqlGeneration and dbSystems moved sqlGeneration.py to sqlGeneration/standard: only db systems and sqlGeneration are concerned","title":"Breaking changes"},{"location":"changelog/#060-sqlite-support","text":"added further metadata to setup.py created MANIFEST.in sqlite is now supported: added base db system all other db systems inherit from","title":"0.6.0 - Sqlite support"},{"location":"changelog/#050-custom-data-types","text":"introduced custom data types annotated functions to give type hints","title":"0.5.0 - Custom data types"},{"location":"changelog/#042","text":"added naming constraits of a foreign key","title":"0.4.2"},{"location":"changelog/#041","text":"replaced pytest.raises with assertRaises from unittest fixed primary key bug that generated invalid SQL","title":"0.4.1"},{"location":"changelog/#040","text":"converted test-cases into 'unittest.TestCase's added primary and foreign key constraits added unique contrait custom exceptions got a hierarchy","title":"0.4.0"},{"location":"changelog/#032","text":"added importing sub-modules recursivly in all __init__.py files","title":"0.3.2"},{"location":"changelog/#030","text":"added MySql db system with connect_to_dn(), close_connection(), get_cursor() MySQL db system got functions to process db actions renamed test files to order their execution create_table() got the option to use \"IF NOT EXISTS\" no longer directly inserting values into SQL statements -> added parameter for defining a placeholder (default: '?') introduced SQL generator select new requirement: mysql-connector-python","title":"0.3.0"},{"location":"changelog/#022","text":"introduced the following SQL generators: drop_table drop_db","title":"0.2.2"},{"location":"changelog/#021","text":"minimum python version set to 3.8 or newer","title":"0.2.1"},{"location":"changelog/#020","text":"added setup.py introduced the following SQL generators: insert_into delete_from create_table update added sqlGeneration.check_validName() wich checks whether a string is a valid name for a database table","title":"0.2.0"},{"location":"gettingStarted/","text":"Getting started Installation SqlIntuitive can be installed simply by running: pip install sqlIntuitive ...wich will install the latest version. That's already it! You can then import it as usual with: import sqlIntuitive First steps To learn how to use SqlIntuitive, see the user guide","title":"Getting started"},{"location":"gettingStarted/#getting-started","text":"","title":"Getting started"},{"location":"gettingStarted/#installation","text":"SqlIntuitive can be installed simply by running: pip install sqlIntuitive ...wich will install the latest version. That's already it! You can then import it as usual with: import sqlIntuitive","title":"Installation"},{"location":"gettingStarted/#first-steps","text":"To learn how to use SqlIntuitive, see the user guide","title":"First steps"},{"location":"codeDocs/overview/","text":"","title":"Overview"},{"location":"userGuide/overview/","text":"","title":"Overview"}]}